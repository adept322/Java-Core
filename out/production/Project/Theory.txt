+1. Cколько занимают места примитивные типы?

    Целочисленные типы
    byte - 1 байт (-128 <> 127)
    short - 2 байта (-32.768 <> 32.767)
    int - 4 байта (-2.147.483.648 <> 2.147.483.647)
    long - 8 байт (Целое 64 разрядное число)

    Дробные типы
    float - 4 байта (3.4e-038 <> 3.4e+038)
    double - 8 байт (1.7e-308 <> 1.7e+308)

    Логический тип
    boolean - 1 байт (FALSE/TRUE)

    Символ (Беззнаковый тип)
    char - 2 бита (Символ в кодировке UNICODE)

    Ссылочные типы
    Занимаемая память (Например):
    int number = ...
    sizeOf(primitive) = 4 байта
    Integer number = new Integer(...)
    sizeOf(Integer) + sizeOf(reference)

    Обьект состоит из
        Заголовка
        Памяти для примитивных типов
        Памяти для ссылочных типов
        Смещение/Выравнивание

    В 32-х разрядных JVM размер ссылки обычно 4 байта, а в 64-х разрядных — 8 байт. Хотя это условие и не обязательно.

    https://habr.com/ru/post/134102/

+2. Что такое явные и неявные приведения, с чем связано их наличие?
    Типы приведения
    Расширение приведения (автоматически) – преобразование меньшего типа данных в больший размер типа. byte -> short -> char -> int -> long -> float -> double
    Сужение приведения (вручную) – преобразование данных большего размера в тип меньшего размера. double -> float -> long -> int -> char -> short -> byte

    Преобразование к вещественному типу может привести к потере точности из-за нехватки значащих цифр.
    При преобразовании из целых чисел в дробные могут отбрасываться самые младшие части числа.
    Но т.к. смысл дробного числа в том, чтобы хранить приблизительное значение, такое присваивание разрешается.

    (Явное) Вручную
    В этом случае, если вы хотите присвоить значение большего типа данных меньшему типу данных, вы можете выполнить явное приведение или сужение типов.
    Это полезно для несовместимых типов данных, где автоматическое преобразование невозможно.

    (Неявное)
    Тип приведения, когда два типа данных автоматически конвертируются.
    Также известно как неявное преобразование.
    Происходит, когда два типа данных совместимы, а также когда мы присваиваем значение меньшего типа данных большему типу данных.

    (Сюрприз)
    Типы byte, short, char всегда преобразовываются в тип int при взаимодействии между собой.
    Не зря же тип int считается стандартным целочисленным типом.

    (Важный нюанс)
    Операция приведения типа имеет довольно высокий приоритет.

    Устройство чисел в памяти:
    (int)	0b00000000000011110100001001000000 = 1,000,000
    (short)	0b0100001001000000 = 16,960
    (byte)	0b01000000 = 64

    https://javahelp.online/osnovy/privedeniya-tipov-java
    https://javarush.ru/quests/lectures/questsyntaxpro.level07.lecture01

+3. Прямой, дополнительный, обратный код

    Прямой код - способ представления двоичных чисел с фиксированной запятой. Главным образом используется для записи неотрицательных чисел
    (Только неотрицательные числа)
    Прямой код используется главным образом для представления неотрицательных чисел.
    Использование прямого кода для представления отрицательных чисел является неэффективным - очень сложно реализовать арифметические операции и,
    кроме того, в прямом коде два представления нуля - положительный ноль и отрицательный ноль (чего не бывает):

    Обратный код - метод вычислительной математики, позволяющий вычесть одно число из другого, используя только операцию сложения.
    Обратный двоичный код положительного числа состоит из одноразрядного кода знака (битового знака) - 0, за которым следует значение числа.
    Обратный двоичный код отрицательного числа состоит из одноразрядного кода знака (битового знака) - 1, за которым следует инвертированное значение положительного числа.

    Дополнительный код - наиболее распространенный способ представления отрицательных чисел.
    Он позволяет заменить операцию вычитания на операцию сложения и сделать операции сложения и вычитания одинаковыми для знаковых и беззнаковых чисел.
    В дополнительном коде (как и в прямом и обратном) старший разряд отводится для представления знака числа

    Дополнительный код
    1-й способ:
    - инвертируем значение отрицательного числа, записанного в прямом коде (знаковый бит не трогаем)
    - к полученной инверсии прибавляем 1

    https://microkontroller.ru/programmirovanie-mikrokontrollerov-avr/pryamoy-obratnyiy-dopolnitelnyiy-kod-dvoichnogo-chisla/
    https://math.semestr.ru/inf/inverse.php

+4. Как в двоичном виде хранятся числа разных типов в памяти (int,float,double)? Как хранятся отрицательные?
    IEEE-754
    (Эпсилон) (Знак - 1 бит)\
    int(Знак - 1 бит)(Значение - 31 бит) 23 бита = 32 бита
    double (Знак - 1 бит)(Экспонента - 10 бит)(Мантисса - 53 бита) 64 бита = 8 байт
    float (Знак - 1 бит)(Экспонента - 8 бит)(Мантисса - 23 бита) 32 бита = 4 байта

    !!Если тип знаковый, то первый бит отвечает за знак числа!!
    Вещественные числа — это числа, у которых есть дробная часть (она может быть нулевой). Они могут быть положительными или отрицательными.
    Вещественное число  состоит из целой части, дробной части и знака. У положительных чисел знак обычно не указывают явно, а у отрицательных указывают.

    (Числа с плавающей точкой)
    У 32-битных чисел с плавающей точкой (в Java это как раз тип float) точность составляет примерно 24 бита, то есть около 7 знаков после запятой.
    А у 64-битных чисел (в Java это тип double) — точность примерно 53 бита, то есть примерно 16 знаков после запятой.

    https://habr.com/ru/post/233245/
    https://javarush.ru/groups/posts/2136-ustroystvo-vejshestvennihkh-chisel
    https://habr.com/ru/post/112953/
    https://csharpindepth.com/Articles/FloatingPoint
    https://csharpindepth.com/Articles/Decimal

+5. 2.1.1 сделать другим способом
+6. Почему возникает погрешность при операциях с дробными числами?
    IEEE754-2008

    Погрешность возникает из-за того, что сам численный метод или математическая модель является лишь приближением к точному методу (например, дифференцирование).
    В большинстве случаев погрешность численного метода можно уменьшить до требуемого значения за счет изменения параметров метода
    (например, уменьшением шага дискретизации, или увеличением количества итераций).

    Использование двоичной арифметики для десятичных чисел с плавающей точкой может приводить к совершенно непредсказуемым результатам.

    Правила округления двоичного представления чисел, заложенные в стандарте IEEE754, не решают проблему точного вычисления, рассмотренных здесь чисел.
    В нашем случае причина ошибки кроется в сочетании цифр, стоящих после последних верных цифр десятичных слагаемых, о которых, априори, ничего не известно.

    Ситуацию с фатальными ошибками не спасает и формат более высокой точности, например double.
    Как мы выше уже отмечали, это объясняется самой природой конвертации чисел из одной системы счисления в другую.

    https://habr.com/ru/post/309812/
    https://habr.com/ru/post/266023/
    http://aco.ifmo.ru/el_books/numerical_methods/lectures/app_1.html#:~:text=Погрешность%20возникает%20из-за%20того%2C%20что,учтены%20какие-то%20особенности%20рассматриваемой%20задачи

+7. Чем отличаются unicode ascii utf 8 и utf16

    ASCII определяет 128 символов, которые сопоставляются с числами 0-127. Unicode определяет (меньше) 221 символы,
    которые аналогично сопоставляются с числами 0-221.
    (хотя не все номера в настоящее время назначены, а некоторые зарезервированы).
    ASCII определяет 128 символов, которые сопоставляются с числами 0-127. Unicode определяет (меньше) 221 символы,
    которые аналогично сопоставляются с числами 0-221 (хотя не все номера в настоящее время назначены, а некоторые зарезервированы).

    Unicode является надмножеством ASCII, и числа 0-128 имеют то же значение в ASCII, что и в Unicode. Например, число 65 означает "Латинская столица "а"".
    В ASCII символ может занимать не менее 7 бит, последний бит отвечает за четность.
    (UTF-8 vs UTF-16 vs UTF-32)
    UTF-8 и UTF-16 кодировки переменной длины.
    в UTF-8 символ может занимать не менее 8 бит.
    In UTF-16, длина символа начинается с 16 бит.
    UTF-32-кодировка фиксированной длины в 32 бита.

    UTF-8 использует набор ASCII для первых 128 символов.
    Это удобно, потому что это означает, что текст ASCII также действителен в UTF-8.

    https://habr.com/ru/post/544084/
    https://javarush.ru/groups/posts/1418-kodirovka-teksta-ascii-windows-1251-cp866-koi8-r-i-junikod-utf-8-16-32--kak-ispravitjh-problemu
    https://askdev.ru/q/v-chem-raznica-mezhdu-ascii-i-unicode-4723/#:~:text=UTF-8%20использует%20набор%20ASCII%20для,UTF%20-8%3A%20минимум%208%20бит

+8. В каких случаях лучше использовать StringBuilder вместо String?

    Благодаря неизменности, хэшкод экземпляра класса String кэшируется.
    Его не нужно вычислять каждый раз, потому что значения полей объекта никогда не изменятся после его создания.
    Это дает высокую производительность при использовании данного класса в качестве ключа для HashMap.
    Класс String можно использовать в многопоточной среде без дополнительной синхронизации.
    Еще одна особенность класса String — для него перегружен оператор "+" в Java. Поэтому конкатенация (сложение) строк выполняется довольно просто

    Это еще одно интересное свойство класса String: объекты любых классов можно привести к строковому представлению, используя метод toString(),
    определенный в классе Object и наследуемый всеми остальными классами.
    Часто метод toString() у объекта вызывается неявно. Например когда мы выводим что-то на экран или складываем String с объектом другого класса.
    У класса String есть еще одна особенность. Все строковые литералы, определенные в Java коде,
    вроде "asdf", на этапе компиляции кэшируются и добавляются в так называемый пул строк.

    На самом деле, в силу неизменности класса String, в результате каждой операции создаются новые экземпляры строк, а старые отбрасываются,
    порождая большое количество мусора.
    Как же избежать нерационального использования памяти?
    StringBuffer
    Преимущества:
    Как уже сказано, StringBuffer — изменяемый класс, поэтому при работе с ним не возникает такого же количества мусора в памяти, как со String.
    Поэтому если над строками проводится много модификаций, лучше использовать StringBuffer.
    StringBuffer — потокобезопасный класс. Его методы синхронизированы, а экземпляры могут быть использованы несколькими потоками одновременно.
    Недостатки:
    С одной стороны, потокобезопасность — преимущество класса, а другой — недостаток. Синхронизированные методы работают медленнее не сихнронизированных.

    String: При работе со строками, которые редко будут модифицироваться
    StringBuffer: При работе со строками, которые часто будут модифицироваться в многопоточной среде
    StringBuilder: При работе со строками, которые часто будут модифицироваться, в однопоточной среде



    https://javarush.ru/groups/posts/2351-znakomstvo-so-string-stringbuffer-i-stringbuilder-v-java
    https://habr.com/ru/post/260767/
    https://www.it-rem.ru/string-vs-stringbuilder.html
    https://divancoder.ru/2017/06/string-stringbuffer-stringbuilder/

+9. 2.4.1 решить с помощью рекурсии
+10. Попробовать без стрингбилдера (Ничего не вышло)

Дополнительно:
https://habr.com/ru/post/262245/
https://javarush.ru/groups/posts/1924-operacii-nad-chislami-v-java